# Simulate queueing system M/M/1 and estimate its parameters; @author: Nguyen Duc viet
import random as rd
import numpy as np
import simpy
import sys
import getopt
RANDOM_SEED = ''               #Seed variable for random number generation
NUMBER_PACKETS = ''           #Needed number packets (requests) for simulation
INTERVAL_PACKETS = ''            # Mean inter-arrival time between packets
TIME_SERVICE = ''               # Mean service-time of packets
data_wt = []                    #List variable for keeping waiting time in queue of each packets

try:
    opts, args = getopt.getopt(sys.argv[1:], "hr:n:a:s:", ["rndseed=", "numberpacket=", "arrival=", "service="])
    #Example "edit configuration": -r 42 -n 2000 -a 5 -s 2
except getopt.GetoptError:
    print('MM1.py -r <random seed> -n <number packets> -a <mean arrival time> -c <mean service time>')
    sys.exit(2)
for opt, arg in opts:
    if opt == '-h':
        print('MM1.py -r <random seed> -n <number packets> -a <mean arrival time> -c <mean service time>')
        sys.exit()
    elif opt in ("-r", "--rndseed"):
        RANDOM_SEED = arg
    elif opt in ("-n", "--numberpacket"):
        NUMBER_PACKETS = arg
    elif opt in ("-a", "--arrival"):
        INTERVAL_PACKETS = arg
    elif opt in ("-s", "--service"):
        TIME_SERVICE = arg

RANDOM_SEED = int(RANDOM_SEED)
NUMBER_PACKETS = int(NUMBER_PACKETS)
INTERVAL_PACKETS = float(INTERVAL_PACKETS)
TIME_SERVICE = float(TIME_SERVICE)

# definition functions
def arrival(env, number, interval,counter ):           #Funtion generate arrival packets: number - number packets need for simulation, interval - Mean inter-arrival time between packets
    for i in range(number):
        t = rd.expovariate(1.0/interval)
        yield env.timeout(t)
        c = service(env,counter,time_service = TIME_SERVICE)
        env.process(c)
def service(env,counter,time_service):
    arrive = env.now
    with counter.request() as req:
        yield req                                    #Wait for requests
        wait = env.now - arrive                      #Wait time of request in system
        data_wt.append(wait)                            #Store wait time in queue of each packet in variable data[]
        ts = rd.expovariate(1/time_service)          #Service time of request generated by exp distribution
        yield env.timeout(ts)

def est_mm1(lamda,mu):          #not use in this simulation
    u = lamda/mu        #Utilization
    Ed = 1/(mu-lamda)   #Mean delay (system waiting time of a customer from the moment it arrives until service is completed
    Eq = lamda*Ed       #mean queue-size including the customer in service
    return (u,Ed,Eq)
def main():
    print("Starting simulation of queueing system M/M/1...\n")
    rd.seed(RANDOM_SEED)
    env = simpy.Environment()
    counter = simpy.Resource(env, capacity=1)     # A single server
    t = env.now
    env.process(arrival(env, NUMBER_PACKETS, INTERVAL_PACKETS, counter))
    env.run()
    t = env.now - t   #total time of simulation process
    print("Total simulation time: %f"% t)

    #Calculates simulation parameters for M/M/1 queueing system
    u = TIME_SERVICE/INTERVAL_PACKETS
    data = np.array(data_wt)
    tq  = data.sum()             # Total wait time in queue of all packets
    lamda = 1/INTERVAL_PACKETS
    mu = 1/TIME_SERVICE
    Ed = 1/(mu-lamda)
    Eq = lamda*Ed       #mean queue-size including the customer in service
    print("Total wait time in queue of all packets: %f" %tq)
    print("Utilization of system:%f" %u)
    print("Mean time spent in system: %f" %Ed)
    print("Mean queue size in system: %f" %Eq)
if __name__ == "__main__":
    main()
